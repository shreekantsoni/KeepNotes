{"version":3,"sources":["NoteHeader.jsx","NoteCreate.js","NoteShow.js","footer.js","NoteApp.js","serviceWorker.js","index.js"],"names":["NoteHeader","className","style","fontSize","color","position","left","NoteCreate","props","useState","title","content","note","setNote","InputEvent","event","target","name","value","aoldData","console","log","expan","setExpand","onSubmit","e","preventDefault","onDoubleClick","type","onChange","placeholder","autoComplete","rows","column","onClick","id","passNote","NoteShow","cTimes","Date","toLocaleTimeString","c2Time","deleteItem","Footer","year","getFullYear","NoteApp","addItem","setAddItem","onDelete","window","confirm","oldData","filter","currData","indx","aPrevData","map","val","index","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAeeA,G,MAbI,WAEjB,OAAO,oCACJ,yBAAKC,UAAU,UACb,uBAAGA,UAAU,aAAaC,MAAO,CAACC,SAAS,OAAQC,MAAO,WAC1D,iDACE,wBAAIF,MAAO,CAACG,SAAU,WAAYC,KAAM,QAAxC,iBACA,uBAAGL,UAAU,aAAaC,MAAO,CAACC,SAAS,OAAQC,MAAO,QAASC,SAAU,WAC9EC,KAAM,a,cCmDCC,EA3DI,SAACC,GAAW,IAAD,EACJC,mBAAS,CAC/BC,MAAO,GACPC,QAAS,KAHiB,mBACrBC,EADqB,KACfC,EADe,KAMvBC,EAAa,SAACC,GAAU,MAIHA,EAAMC,OAArBC,EAJkB,EAIlBA,KAAMC,EAJY,EAIZA,MAChBL,GAAQ,SAACM,GACP,OAAO,eACAA,EADP,eAEKF,EAAOC,OAGTE,QAAQC,IAAIT,IAjBU,EAiCFH,oBAAS,GAjCP,mBAiCtBa,EAjCsB,KAiCfC,EAjCe,KA2C5B,OAAS,oCACN,yBAAKtB,UAAU,aAEZ,0BAAMuB,SA1BO,SAACC,GAClBA,EAAEC,kBAyB8BC,cAPf,WACjBJ,GAAU,KAOJD,EACA,2BAAOM,KAAK,OAAOX,KAAK,QAAQC,MAAON,EAAKF,MAAOmB,SAAUf,EAAYgB,YAAY,QAAQC,aAAa,QACpG,KACN,8BAAUC,KAAK,GAAGC,OAAO,GAAGhB,KAAK,UAAUC,MAAON,EAAKD,QAASkB,SAAUf,EAAYoB,QAf9E,WACdX,GAAU,IAcqGO,YAAY,oBAClHR,EACH,4BAAQa,GAAG,MAAMD,QA3BT,WACf1B,EAAM4B,SAASxB,GACfC,EAAQ,CACLH,MAAO,GACPC,QAAS,OAuB+B,0BAAMV,UAAU,aAAhB,QAC9B,SC9BDoC,EAvBE,SAAC7B,GAEhB,IAII8B,GAAS,IAAIC,MAAOC,qBACjBC,EAAShC,mBAAS6B,GAEzB,OAAO,oCACJ,yBAAKrC,UAAU,QACZ,4BAAI,+BAAKO,EAAME,MAAX,MACH,6BACD,+BAAKF,EAAMG,QAAX,KACC,6BACD,gCAAM8B,EAAN,KACA,4BAAQxC,UAAU,MAAMiC,QAdX,WACjB1B,EAAMkC,WAAWlC,EAAM2B,MAcjB,0BAAMlC,UAAU,cAAhB,IAA8B,uBAAGA,UAAU,kBAA3C,SCNK0C,EAXA,WAEb,IAAMC,GAAO,IAAIL,MAAOM,cAExB,OAAO,oCACJ,gCACG,8CAAiBD,EAAjB,QC4COE,EA7CC,WAAO,IAAD,EAESrC,mBAAS,IAFlB,mBAEdsC,EAFc,KAELC,EAFK,KAWfC,EAAW,SAACd,IAGJ,IADJe,OAAOC,QAAQ,qBAKtBH,GAAW,SAACI,GAAD,OACRA,EAAQC,QAAO,SAACC,EAAUC,GACvB,OAAOA,IAASpB,SAMxB,OAAO,oCACF,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYC,SAxBF,SAACxB,GAEfoC,GAAW,SAACQ,GACT,MAAM,GAAN,mBAAUA,GAAV,CAAqB5C,UAuBnBmC,EAAQU,KAAI,SAACC,EAAKC,GACd,OACE,kBAAC,EAAD,CAAUC,IAAKD,EACLxB,GAAIwB,EACJjD,MAAOgD,EAAIhD,MACXC,QAAS+C,EAAI/C,QACb+B,WAAYO,OAK7B,kBAAC,EAAD,QCpCaY,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCANC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SDiH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.49914561.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NoteHeader = () => {\r\n\r\n  return <>\r\n     <div className=\"header\">\r\n       <i className=\"fa fa-book\" style={{fontSize:\"42px\", color: \"white\"}}></i>\r\n       <h2> &nbsp; Keep Notes </h2>\r\n         <h4 style={{position: \"absolute\", left: \"49%\"}}> Welcome App </h4>\r\n         <i className=\"fa fa-edit\" style={{fontSize:\"29px\", color: \"white\", position: \"absolute\",\r\n        left: \"59%\"}}></i>\r\n     </div> \r\n  </>\r\n };\r\n\r\nexport default NoteHeader;","import React,{useState} from 'react';\r\n\r\nconst NoteCreate = (props) => {\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n });\r\n\r\n\tconst InputEvent = (event) => {\r\n\r\n      /*const value = event.target.value;\r\n      const name = event.target.name;*/\r\n      const {name, value} = event.target;\r\n\t  setNote((aoldData) => {\r\n\t    return {\r\n\t        ...aoldData,\r\n\t        [name]: value,\r\n\t      }\r\n\t   });\r\n        console.log(note);\r\n   };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n\r\n\tconst addEvent = () => {\r\n\t  props.passNote(note);\r\n\t  setNote({\r\n\t\t    title: \"\",\r\n\t\t    content: \"\",\r\n\t\t });\r\n\t };\r\n\r\n const [expan, setExpand] = useState(false);\r\n\r\n const expandIt = () => {\r\n    setExpand(true);\r\n  };\r\n\r\n  const expandBack = () => {\r\n    setExpand(false);\r\n  };\r\n\r\n  return ( <>\r\n     <div className=\"main_note\">\r\n       {/*<div className=\"form\" onDoubleClick={expandBack}>*/}\r\n        <form onSubmit={formSubmit} onDoubleClick={expandBack}>\r\n         {expan ? (\r\n          <input type=\"text\" name=\"title\" value={note.title} onChange={InputEvent} placeholder=\"Title\" autoComplete=\"off\"/>\r\n            ) : null}\r\n          <textarea rows=\"\" column=\"\" name=\"content\" value={note.content} onChange={InputEvent} onClick={expandIt} placeholder=\"Write here ....\"/>\r\n            {expan ? (\r\n          <button id=\"btn\" onClick={addEvent}><span className=\"plus-sign\"> + </span></button>\r\n            ) : null}      \r\n        </form>\r\n      </div>\r\n    </>\r\n )};\r\n\r\nexport default NoteCreate;","import React,{useState} from 'react';\r\n\r\nconst NoteShow = (props) => {\r\n\r\n  const deleteNote = () => {\r\n    props.deleteItem(props.id);\r\n   };\r\n\r\n  let cTimes = new Date().toLocaleTimeString();\r\n   const c2Time = useState(cTimes);\r\n\r\n  return <>\r\n     <div className=\"note\">\r\n        <h1><b> {props.title} </b></h1>\r\n         <br />\r\n        <p> {props.content} </p>\r\n         <hr />\r\n        <h6> {c2Time} </h6>\r\n        <button className=\"btn\" onClick={deleteNote}>\r\n          <span className=\"deleteIcon\"> <i className=\"fa fa-trash-o\" ></i> </span>\r\n        </button>\r\n      </div>\r\n    </>\r\n };\r\n\r\nexport default NoteShow;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n   \r\n  const year = new Date().getFullYear();\r\n\r\n  return <>\r\n     <footer>\r\n        <p> copyright Â© {year} </p>\r\n     </footer> \r\n  </>\r\n };\r\n\r\nexport default Footer;","import React,{useState} from 'react';\r\nimport './Note.css';\r\nimport NoteHeader from './NoteHeader';\r\nimport NoteCreate from './NoteCreate';\r\nimport NoteShow from './NoteShow';\r\nimport Footer from './footer';\r\n\r\nconst NoteApp = () => {\r\n\r\n const [addItem, setAddItem] = useState([]);\r\n\r\n const addNote = (note) => {\r\n   // alert(\"ok\");\r\n   setAddItem((aPrevData) => {\r\n      return[...aPrevData, note]\r\n    });\r\n };\r\n\r\n const onDelete = (id) => {\r\n\r\n  var yt = window.confirm('Delete the item?');\r\n     if(yt === false)\r\n      {\r\n\r\n      } else {\r\n    setAddItem((oldData) =>\r\n       oldData.filter((currData, indx) => {\r\n          return indx !== id;\r\n       })\r\n     );\r\n    }\r\n  };\r\n\r\n  return <>\r\n       <NoteHeader />\r\n       <NoteCreate passNote={addNote} />\r\n       {/*<NoteShow />*/}\r\n       {addItem.map((val, index) => {\r\n            return (\r\n              <NoteShow key={index} \r\n                        id={index} \r\n                        title={val.title} \r\n                        content={val.content}\r\n                        deleteItem={onDelete}\r\n             />\r\n           );\r\n        })}\r\n       \r\n       <Footer />\r\n   </>\r\n };\r\n\r\nexport default NoteApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n//import App2 from './App2';\n//import App3 from './App3';\n//import SForm from './SForm';\n//import Todo from './todo';\nimport NoteApp from './NoteApp';\n//import UseEffect from './UseEffect';\n//import Router from './Router';\n//import R from './Router/R'\n//import App5 from './Animated/App5'\n//import SForm2 from './SForm2';\n// import HandelEvent from './HandelEvent';\n//import Demo from './Demo' ;\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<NoteApp/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}